<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>刘蓓科的个人博客</title>
    <link>http://liubeike.com/</link>
    <description>Recent content on 刘蓓科的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 07 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="http://liubeike.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何实现一个深拷贝？</title>
      <link>http://liubeike.com/posts/210707/</link>
      <pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>http://liubeike.com/posts/210707/</guid>
      <description>正在编辑</description>
    </item>
    
    <item>
      <title>说说跨域的那些事儿</title>
      <link>http://liubeike.com/posts/210706/</link>
      <pubDate>Tue, 06 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>http://liubeike.com/posts/210706/</guid>
      <description>正在编辑</description>
    </item>
    
    <item>
      <title>代码解释函数防抖与函数节流</title>
      <link>http://liubeike.com/posts/210705/</link>
      <pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>http://liubeike.com/posts/210705/</guid>
      <description>//函数防抖：事件被触发n秒后再执行，如果在n秒内连续触发，只执行最后一次。 //大白话：公交车到站牌关门，如果一直有乘客上车，那么需要等最后一次乘客上车后，再进行关门。 //使用场景：用于input输入框的格式验证，浏览器窗口大小调整。 function debounce(fn, delay) { let timerId = null; return () =&amp;gt; { const context = this; if (timerId) { window.clearTimeout(timerId); } timerId = setTimeout(() =&amp;gt; { fn.apply(context, arguments); timerId = null; }, delay); }; } //函数节流：限制一个函数在规定时间内只能执行一次。 //大白话：游戏里的技能，就算手按的再快，也只能在冷却时间内只释放一次。 //使用场景：监听滚动条，例如滑到底部自动加载更多内容。 function throttle(fn, delay) { let canUse = true; return () =&amp;gt; { if (canUse) { fn.apply(this, arguments); canUse = false; setTimeout(() =&amp;gt; (canUse = true), delay); } }; } //防抖测试：1s内频繁点击只执行最后一次 const button_D = document.</description>
    </item>
    
    <item>
      <title>浅析Promise、AJAX</title>
      <link>http://liubeike.com/posts/210704/</link>
      <pubDate>Sun, 04 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>http://liubeike.com/posts/210704/</guid>
      <description>Promise是异步编程的一种解决方案，解决了传统异步编程中产生的“回调地狱问题”。   Promise的三种状态，且修改后状态不可变。
 pending 实例化时的默认状态 fulfilled 成功时的状态 rejected 失败时的状态    Promise的两个常用方法
 Promise.all( )：接收一个Promise实例数组参数，返回一个新的Promise，所有参数必须都成功才能成功，只要其中一个失败就会直接失败。 Promise.race( )：接收一个Promise实例数组参数，返回一个新的Promise，第一个完成的Promise的结果状态就是最终的结果状态，如果全部失败才会失败。    async与await
 async函数：函数的返回值是一个Promise对象，此Promise对象的结果是此函数执行的返回值决定的。 await表达式：一般情况下，await右侧接一个Promise对象，返回的是此Promise成功的值。    示例：
//使用Promise封装一个AJAX网络请求函数  function sendAJAX(url) { return new Promise((resolve, reject) =&amp;gt; { const xhr = new XMLHttpRequest(); xhr.open(&amp;#34;GET&amp;#34;, url); xhr.send(); xhr.onreadystatechange = () =&amp;gt; { if (xhr.readyState === 4) { if (xhr.status &amp;gt;= 200 &amp;amp;&amp;amp; xhr.status &amp;lt; 300) { resolve(xhr.response); } else { reject(xhr.</description>
    </item>
    
    <item>
      <title>简述闭包</title>
      <link>http://liubeike.com/posts/210703/</link>
      <pubDate>Sat, 03 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>http://liubeike.com/posts/210703/</guid>
      <description>我理解的闭包：在作用域外部能够访问其作用域内部的变量，就构成闭包。  举例说明 function f1() { let n = 1; function f2() { n += 1; console.log(n); } return f2; } const foo = f1(); foo(); //2  闭包的优点与缺点  优点：可以隐藏函数内部的实现细节，只暴露一个返回值供外部访问。 缺点：在IE浏览器下，可能会导致内存泄漏。    </description>
    </item>
    
    <item>
      <title>简述原型和原型链</title>
      <link>http://liubeike.com/posts/210702/</link>
      <pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>http://liubeike.com/posts/210702/</guid>
      <description>每个对象都会在其内部初始化一个属性，就是prototype(原型)。 当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么他就会去prototype里找这个属性，而这个prototype又会有自己的prototype，于是就这样一直找下去，形成了原型链。  每个对象都有一个__proto__属性，并且指向它的prototype原型对象 每个构造函数都有一个prototype原型对象,prototype原型对象里的constructor指向构造函数本身   关于prototype与__proto__容易让人疑惑的点是，构造函数也有__proto__属性。之所以会这样，是因为构造函数也是一个对象，它是构造函数Function()的实例对象。因此，所有构造函数的__proto__属性都指向Function构造函数的原型对象。同时，原型对象是特殊的对象，每个构造函数的原型对象都会有一个__proto__属性，共同指向构造函数Object()的原型对象。构造函数Object()的原型对象，作为除自身以外被所有原型对象指向的对象，其担当着根节点的角色，它的__proto__属性指向null。
 </description>
    </item>
    
    <item>
      <title>5分钟使用Hugo搭建个人网站</title>
      <link>http://liubeike.com/posts/210701/</link>
      <pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>http://liubeike.com/posts/210701/</guid>
      <description>Hugo 是一个用 Go 编写的静态网站生成器，一般只需几秒钟就能生成一个网站（每页少于 1 毫秒），被称为“世界上最快的网站构建框架”。  安装Hugo  brew install hugo //采用Homebrew方式 创建站点  hugo new site blog //在当前目录创建名为blog的站点 添加主题
本站采用了PaperMod主题，更多主题列表可参阅https://themes.gohugo.io/  //进入至blog/themes/使用git拉取主题： git clone git@github.com:adityatelange/hugo-PaperMod.git //在blog/config.toml配置文件中进行主题配置： theme = &amp;quot;hugo-PaperMod&amp;quot; 添加文章内容
在blog/content/posts目录下创建你的md文档，并且可以在文档开头声明一下文档名称和日期。例如：  --- title: &amp;quot;My First Post&amp;quot; date: 2020-05-20 --- 运行serve以便于进行调试预览  hugo server //在你的站点根目录运行 构建静态页面以便于发布  hugo //在你的站点根目录运行 最后，就可在blog/public目录下找到你构建的静态页面啦！</description>
    </item>
    
  </channel>
</rss>
